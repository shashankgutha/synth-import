name: Update Elastic Agent Config

on:
  workflow_run:
    workflows: ["Import Synthetics Monitors"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  update-elastic-agent:
    runs-on: ubuntu-latest
    # Run only on successful import workflows or PR events
    if: github.event_name != 'workflow_run' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
    - name: Check if update should proceed
      if: github.event_name == 'workflow_run'
      id: should-update
      run: |
        echo "Workflow run event details:"
        echo "Event name: ${{ github.event_name }}"
        echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Workflow run event: ${{ github.event.workflow_run.event }}"
        echo "Workflow run name: ${{ github.event.workflow_run.name }}"
        echo "Head commit message: ${{ github.event.workflow_run.head_commit.message }}"
        
        # Only proceed for push events (auto imports) or live manual imports
        if [ "${{ github.event.workflow_run.event }}" = "push" ]; then
          echo "Push event detected - proceeding with elastic agent update"
          echo "should_update=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.workflow_run.event }}" = "workflow_dispatch" ]; then
          # For manual runs, we can't easily detect if it was dry run or fresh import
          # So we'll proceed and let the change detection handle it
          echo "Manual workflow dispatch detected - proceeding with elastic agent update"
          echo "should_update=true" >> $GITHUB_OUTPUT
        else
          echo "Skipping elastic agent update for event type: ${{ github.event.workflow_run.event }}"
          echo "should_update=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout repository
      if: github.event_name != 'workflow_run' || steps.should-update.outputs.should_update == 'true'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      if: github.event_name != 'workflow_run' || steps.should-update.outputs.should_update == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      if: github.event_name != 'workflow_run' || steps.should-update.outputs.should_update == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Get changed monitor folders
      if: github.event_name != 'workflow_run' || steps.should-update.outputs.should_update == 'true'
      id: changed-folders
      run: |
        echo "Getting changed monitor JSON files..."
        echo "Event name: ${{ github.event_name }}"
        echo "Workflow run head SHA: ${{ github.event.workflow_run.head_sha }}"
        echo "Workflow run event: ${{ github.event.workflow_run.event }}"
        
        # For workflow_run events, get changed files from the triggering push
        changed_files=$(git diff --name-only HEAD~1..HEAD | grep -E '^monitors/.*\.json$' || true)
        echo "Workflow run changed JSON files: $changed_files"
        
        if [ -n "$changed_files" ]; then
          # Extract unique folder names
          changed_folders=""
          for file in $changed_files; do
            folder=$(echo $file | cut -d'/' -f2)
            if [[ ! $changed_folders =~ $folder ]]; then
              changed_folders="$changed_folders $folder"
            fi
          done
          
          changed_folders=$(echo $changed_folders | xargs)
          echo "changed_folders=$changed_folders" >> $GITHUB_OUTPUT
          echo "Found changed folders: $changed_folders"
        else
          echo "changed_folders=" >> $GITHUB_OUTPUT
          echo "No changed monitor folders found"
        fi
    
    - name: Update Elastic Agent Configurations
      id: update-script
      if: steps.should-update.outputs.should_update == 'true' && steps.changed-folders.outputs.changed_folders != ''
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
      run: |
        echo "Updating elastic-agent.yml for folders: ${{ steps.changed-folders.outputs.changed_folders }}"
        output=$(python .github/scripts/update-elastic-agent.py ${{ steps.changed-folders.outputs.changed_folders }} 2>&1)
        echo "$output"
        echo "script_output<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Commit and push changes
      if: steps.update-script.outcome == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add monitors/*/elastic-agent.yml
        git commit -m "Update elastic-agent.yml configurations - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
        git push
    
    - name: Create deployment summary
      if: always() && steps.should-update.outputs.should_update == 'true'
      run: |
        echo "## 🔄 Elastic Agent Configuration Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by**: Import Synthetics Monitors workflow" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow run event**: ${{ github.event.workflow_run.event }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.update-script.outcome }}" = "success" ]; then
          echo "### ✅ Update Results - Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed folders**: ${{ steps.changed-folders.outputs.changed_folders }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Updated Files**:" >> $GITHUB_STEP_SUMMARY
          for folder in ${{ steps.changed-folders.outputs.changed_folders }}; do
            echo "- \`monitors/$folder/elastic-agent.yml\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Script Output**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.update-script.outputs.script_output }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.update-script.outcome }}" = "failure" ]; then
          echo "### ❌ Update Results - Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed folders**: ${{ steps.changed-folders.outputs.changed_folders }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Error Details**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.update-script.outputs.script_output }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ No Updates Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No monitor folders with JSON changes were found that required elastic-agent.yml updates." >> $GITHUB_STEP_SUMMARY
        fi