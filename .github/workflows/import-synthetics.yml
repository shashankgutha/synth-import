name: Import Synthetics Monitors

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (preview changes without applying)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      fresh_import:
        description: 'Fresh import mode (import all monitors without checking existence - useful for new spaces)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      space_id:
        description: 'Kibana space ID'
        required: false
        default: 'default'
        type: string
  pull_request:
    branches:
      - main
    paths:
      - 'monitors/**/*.json'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  import-monitors:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.changed_files }}
      live_import: ${{ env.LIVE_IMPORT }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/scripts/requirements.txt
    
    - name: Validate monitor files
      run: |
        echo "Validating monitor JSON files..."
        find monitors -path "monitors/*/*/*.json" -type f | while read file; do
          echo "Validating: $file"
          python -m json.tool "$file" > /dev/null || {
            echo "Invalid JSON in $file"
            exit 1
          }
        done
        echo "All JSON files are valid"
    
    - name: Import Synthetics Monitors (Dry Run)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' && github.event.inputs.fresh_import == 'false'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: 'true'
      run: |
        echo "Running import in DRY RUN mode..."
        python .github/scripts/import-synthetics-monitors.py
    
    - name: Import Synthetics Monitors (Live)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false' && github.event.inputs.fresh_import == 'false'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: 'false'
      run: |
        echo "Running import in LIVE mode..."
        python .github/scripts/import-synthetics-monitors.py
    
    - name: Import Synthetics Monitors (Fresh Import)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.fresh_import == 'true'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        FRESH_IMPORT: 'true'
      run: |
        echo "Running import in FRESH IMPORT mode..."
        echo "::notice title=Fresh Import Mode::Export workflow will NOT be triggered to preserve original Git files"
        python .github/scripts/import-synthetics-monitors.py --fresh-import
    
    - name: Get changed monitor files
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      id: changed-files
      run: |
        echo "Detecting changed monitor files..."
        # Get changed files from push or pull request event, excluding deleted files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For pull requests, compare against the base branch
          all_changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep "monitors/.*/.*\.json$" || true)
          echo "Pull request detected - comparing against base branch: ${{ github.event.pull_request.base.ref }}"
        else
          # For push events, use the before/after commits
          all_changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | grep "monitors/.*/.*\.json$" || true)
          echo "Push event detected - comparing commits"
        fi
        
        # Filter out deleted files - only keep files that actually exist
        changed_files=""
        if [ -n "$all_changed_files" ]; then
          echo "All changed monitor files (including deleted):"
          echo "$all_changed_files"
          echo ""
          echo "Filtering out deleted files..."
          
          for file in $all_changed_files; do
            if [ -f "$file" ]; then
              echo "✅ Exists: $file"
              if [ -z "$changed_files" ]; then
                changed_files="$file"
              else
                changed_files="$changed_files"$'\n'"$file"
              fi
            else
              echo "❌ Deleted (skipping): $file"
            fi
          done
        fi
        
        if [ -z "$changed_files" ]; then
          echo "No existing monitor files changed"
          echo "changed_files=" >> $GITHUB_OUTPUT
        else
          echo ""
          echo "Final changed monitor files to process:"
          echo "$changed_files"
          # Use heredoc format for multiline output to handle spaces and special characters
          {
            echo "changed_files<<EOF"
            echo "$changed_files"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        fi
    
    - name: Import Changed Monitors (Auto)
      if: (github.event_name == 'push' || github.event_name == 'pull_request') && steps.changed-files.outputs.changed_files != ''
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        DRY_RUN: 'false'
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        echo "Running import for changed monitors only..."
        echo "Event: ${{ github.event_name }}"
        echo "Changed files: $CHANGED_FILES"
        python .github/scripts/import-synthetics-monitors.py --changed-files
    

    - name: Set import mode indicator
      run: |
        # Create a file to indicate the import mode for the export workflow
        # Set LIVE_IMPORT=true for operations that should trigger export
        # Fresh import should NOT trigger export to preserve original Git files
        if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ] || ([ "${{ github.event.inputs.dry_run }}" = "false" ] && [ "${{ github.event.inputs.fresh_import }}" != "true" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]); then
          echo "LIVE_IMPORT=true" >> $GITHUB_ENV
          echo "TRIGGER_EXPORT=true" >> $GITHUB_ENV
          IMPORT_MODE="live"
        else
          echo "LIVE_IMPORT=false" >> $GITHUB_ENV
          echo "TRIGGER_EXPORT=false" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.fresh_import }}" = "true" ]; then
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              IMPORT_MODE="fresh-import-dry-run"
            else
              IMPORT_MODE="fresh-import"
            fi
          else
            IMPORT_MODE="dry-run"
          fi
        fi
        echo "Import mode: $IMPORT_MODE"
        echo "Trigger export: $TRIGGER_EXPORT"
        
        # Create a summary that export workflow can potentially detect
        if [ "${{ github.event.inputs.fresh_import }}" = "true" ]; then
          echo "::notice title=Fresh Import Mode::This is a fresh import - export will be skipped"
        fi
    
    - name: Check for exported file changes
      if: env.LIVE_IMPORT == 'true'
      id: export-check
      run: |
        git add monitors/
        if git diff --staged --quiet; then
          echo "export_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected from export"
        else
          echo "export_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected from export - files updated with latest Kibana config"
        fi
    
    - name: Commit exported changes
      if: env.LIVE_IMPORT == 'true' && steps.export-check.outputs.export_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add monitors/
        git commit -m "update monitor files with latest Kibana config after import - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Handle different push scenarios
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For pull requests, push to the PR branch
          echo "Pushing changes to PR branch: ${{ github.event.pull_request.head.ref }}"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
        else
          # For push events, push to the current branch
          echo "Pushing changes to current branch"
          git push
        fi
    
    - name: Post PR comment with changes summary
      if: github.event_name == 'pull_request' && env.LIVE_IMPORT == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const changedFiles = process.env.CHANGED_FILES || '';
          const exportChanges = '${{ steps.export-check.outputs.export_changes }}' === 'true';
          const spaceId = '${{ github.event.inputs.space_id || 'default' }}';
          
          let comment = `## 🔄 Synthetics Monitor Import Summary\n\n`;
          comment += `**Space:** \`${spaceId}\`\n`;
          comment += `**Status:** ✅ Import completed successfully\n\n`;
          
          if (changedFiles) {
            const files = changedFiles.split('\n').filter(f => f.trim());
            comment += `**Files processed (${files.length}):**\n`;
            files.forEach(file => {
              const fileName = file.split('/').pop();
              comment += `- \`${fileName}\`\n`;
            });
          }
          
          if (exportChanges) {
            comment += `\n**📥 Export:** Files updated with latest Kibana config\n`;
          } else {
            comment += `\n**📥 Export:** No changes needed\n`;
          }
          
          comment += `\n*Monitors have been imported to Kibana and files synced.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
    


    - name: Create deployment summary
      if: env.LIVE_IMPORT == 'true'
      run: |
        echo "## Synthetics Monitor Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Kibana Space: ${{ github.event.inputs.space_id || 'default' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- Import Mode: Live" >> $GITHUB_STEP_SUMMARY
        echo "- Export Changes: ${{ steps.export-check.outputs.export_changes || 'false' }}" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Monitor Files Processed:**" >> $GITHUB_STEP_SUMMARY
        find monitors -path "monitors/*/*/*.json" -type f | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY

  update-elastic-agent:
    runs-on: ubuntu-latest
    needs: import-monitors
    if: github.event_name == 'pull_request' && needs.import-monitors.outputs.live_import == 'true' && needs.import-monitors.outputs.changed_files != ''
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Extract changed folders and update elastic-agent.yml configurations
      run: |
        # Extract unique space_id/location combinations from changed files
        changed_files="${{ needs.import-monitors.outputs.changed_files }}"
        changed_folders=""
        
        if [ -n "$changed_files" ]; then
          echo "Processing changed files: $changed_files"
          
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              # Extract space_id and location from monitors/space_id/location/file.json
              space_id=$(echo $file | cut -d'/' -f2)
              location=$(echo $file | cut -d'/' -f3)
              folder="$space_id/$location"
              
              # Only include folder if we haven't already added it
              if [[ ! $changed_folders =~ $folder ]]; then
                if [ -z "$changed_folders" ]; then
                  changed_folders="$folder"
                else
                  changed_folders="$changed_folders $folder"
                fi
                echo "✅ Added folder: $folder"
              fi
            fi
          done <<< "$changed_files"
          
          echo "Final changed folders: $changed_folders"
          python scripts/update-elastic-agent.py "$changed_folders"
        else
          echo "No changed files to process"
        fi
    
    - name: Check for changes in elastic-agent.yml files
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "No changes detected in elastic-agent.yml files"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in elastic-agent.yml files"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          git diff --name-only
        fi
    
    - name: Commit and push changes
      if: steps.check-changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update elastic-agent.yml configurations for changed monitors
        
        Updated configurations for the following monitor folders:
        ${{ needs.import-monitors.outputs.changed_folders }}
        
        This update ensures that the Elastic Agent configurations are synchronized with the latest monitor changes."
        git push origin HEAD:${{ github.event.pull_request.head.ref }}
    

    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## Elastic Agent Configuration Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Update Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: Import Synthetics Monitors workflow" >> $GITHUB_STEP_SUMMARY
        echo "- Event Type: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Actor: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- Changes Detected: ${{ steps.check-changes.outputs.has_changes || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Monitor Folders Processed:**" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ needs.import-monitors.outputs.changed_folders }}" ]; then
          echo "${{ needs.import-monitors.outputs.changed_folders }}" | tr ' ' '\n' | sed 's/^/- monitors\//' >> $GITHUB_STEP_SUMMARY
        else
          echo "- No folders processed" >> $GITHUB_STEP_SUMMARY
        fi