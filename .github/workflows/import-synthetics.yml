name: Import Synthetics Monitors

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (preview changes without applying)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      fresh_import:
        description: 'Fresh import mode (import all monitors without checking existence - useful for new spaces)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      space_id:
        description: 'Kibana space ID'
        required: false
        default: 'default'
        type: string
  push:
    branches:
      - main
    paths:
      - 'monitors/*/*/*.json'

jobs:
  import-monitors:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/scripts/requirements.txt
    
    - name: Validate monitor files
      run: |
        echo "Validating monitor JSON files..."
        find monitors -path "monitors/*/*/*.json" -type f | while read file; do
          echo "Validating: $file"
          python -m json.tool "$file" > /dev/null || {
            echo "Invalid JSON in $file"
            exit 1
          }
        done
        echo "All JSON files are valid"
    
    - name: Import Synthetics Monitors (Dry Run)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' && github.event.inputs.fresh_import == 'false'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: 'true'
      run: |
        echo "Running import in DRY RUN mode..."
        python .github/scripts/import-synthetics-monitors.py
    
    - name: Import Synthetics Monitors (Live)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false' && github.event.inputs.fresh_import == 'false'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: 'false'
      run: |
        echo "Running import in LIVE mode..."
        python .github/scripts/import-synthetics-monitors.py
    
    - name: Import Synthetics Monitors (Fresh Import)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.fresh_import == 'true'
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        KIBANA_SPACE_ID: ${{ github.event.inputs.space_id || 'default' }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        FRESH_IMPORT: 'true'
      run: |
        echo "Running import in FRESH IMPORT mode..."
        echo "::notice title=Fresh Import Mode::Export workflow will NOT be triggered to preserve original Git files"
        python .github/scripts/import-synthetics-monitors.py --fresh-import
    
    - name: Get changed monitor files
      if: github.event_name == 'push'
      id: changed-files
      run: |
        echo "Detecting changed monitor files..."
        # Get changed files from the push event
        changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | grep "monitors/.*/.*\.json$" || true)
        
        if [ -z "$changed_files" ]; then
          echo "No monitor files changed"
          echo "changed_files=" >> $GITHUB_OUTPUT
        else
          echo "Changed monitor files:"
          echo "$changed_files"
          # Convert to space-separated list for the script
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT
        fi
    
    - name: Import Changed Monitors (Auto)
      if: github.event_name == 'push' && steps.changed-files.outputs.changed_files != ''
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_API_KEY: ${{ secrets.KIBANA_API_KEY }}
        DRY_RUN: 'false'
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        echo "Running import for changed monitors only..."
        echo "Changed files: $CHANGED_FILES"
        python .github/scripts/import-synthetics-monitors.py --changed-files
    

    - name: Set import mode indicator
      run: |
        # Create a file to indicate the import mode for the export workflow
        # Set LIVE_IMPORT=true for operations that should trigger export
        # Fresh import should NOT trigger export to preserve original Git files
        if [ "${{ github.event_name }}" = "push" ] || ([ "${{ github.event.inputs.dry_run }}" = "false" ] && [ "${{ github.event.inputs.fresh_import }}" != "true" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]); then
          echo "LIVE_IMPORT=true" >> $GITHUB_ENV
          echo "TRIGGER_EXPORT=true" >> $GITHUB_ENV
          IMPORT_MODE="live"
        else
          echo "LIVE_IMPORT=false" >> $GITHUB_ENV
          echo "TRIGGER_EXPORT=false" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.fresh_import }}" = "true" ]; then
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              IMPORT_MODE="fresh-import-dry-run"
            else
              IMPORT_MODE="fresh-import"
            fi
          else
            IMPORT_MODE="dry-run"
          fi
        fi
        echo "Import mode: $IMPORT_MODE"
        echo "Trigger export: $TRIGGER_EXPORT"
        
        # Create a summary that export workflow can potentially detect
        if [ "${{ github.event.inputs.fresh_import }}" = "true" ]; then
          echo "::notice title=Fresh Import Mode::This is a fresh import - export will be skipped"
        fi
    
    - name: Check for exported file changes
      if: env.LIVE_IMPORT == 'true'
      id: export-check
      run: |
        git add monitors/
        if git diff --staged --quiet; then
          echo "export_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected from export"
        else
          echo "export_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected from export - files updated with latest Kibana config"
        fi
    
    - name: Commit exported changes
      if: env.LIVE_IMPORT == 'true' && steps.export-check.outputs.export_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add monitors/
        git commit -m "update monitor files with latest Kibana config after import - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        git push
    
    - name: Create deployment summary
      if: env.LIVE_IMPORT == 'true'
      run: |
        echo "## Synthetics Monitor Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Kibana Space: ${{ github.event.inputs.space_id || 'default' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- Import Mode: Live" >> $GITHUB_STEP_SUMMARY
        echo "- Export Changes: ${{ steps.export-check.outputs.export_changes || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Monitor Files Processed:**" >> $GITHUB_STEP_SUMMARY
        find monitors -path "monitors/*/*/*.json" -type f | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY